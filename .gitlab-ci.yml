variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

stages:
  - pre-build
  - build
  - publish

.build: &build |
  mkdir pkgs

  docker run -v $PWD:/build aldgateventuresbot/rust sh -c "cd /build && \
  wget -q https://download.joinself.com/olm/libself-olm_0.1.14_amd64.deb && \
  apt update && apt install -y ./libself-olm_0.1.14_amd64.deb && \
  for arch in arm64-v8a armeabi-v7a x86 x86_64; do \
    wget -q \"https://download.joinself.com/olm/libself-olm-0.1.14-android-\$arch.tar.gz\" && \
    tar -zxvf \"libself-olm-0.1.14-android-\$arch.tar.gz\" && \
    mv \"self-olm-android-\$arch\" \"/usr/local/lib/\$arch\"; \
  done; \
  cargo build --release && cargo build --release --target aarch64-linux-android && \
  cargo build --release --target armv7-linux-androideabi && \
  cargo build --release --target x86_64-linux-android && \
  cargo build --release --target i686-linux-android && \
  for arch in arm64-v8a armeabi-v7a x86 x86_64; do \
    mkdir -p \"self-omemo-android-\$arch/include/\" && \
    cp self_omemo.h \"self-omemo-android-\$arch/include/\"; \
  done; \
  cp /build/target/aarch64-linux-android/release/libself_omemo.so /build/self-omemo-android-arm64-v8a/ && \
  cp /build/target/armv7-linux-androideabi/release/libself_omemo.so /build/self-omemo-android-armeabi-v7a/ && \
  cp /build/target/i686-linux-android/release/libself_omemo.so /build/self-omemo-android-x86/ && \
  cp /build/target/x86_64-linux-android/release/libself_omemo.so /build/self-omemo-android-x86_64/ && \
  for arch in arm64-v8a armeabi-v7a x86 x86_64; do \
    tar -zcvf \"/build/pkgs/libself-omemo-${version}-android-\$arch.tar.gz\" \"self-omemo-android-\$arch\"; \
  done"

  docker run -v $PWD:/build aldgateventuresbot/fpm sh -c "apt update && \
  apt install -y libsodium-dev rpm && \
  cd /build && \
  mkdir -p self-omemo-linux-x86_64/include/ && \
  cp self_omemo.h /build/self-omemo-linux-x86_64/include/ && \
  cp ./target/release/libself_omemo.so /build/self-omemo-linux-x86_64 && \
  tar -zcvf /build/pkgs/libself-omemo-${version}-linux-x86_64.tar.gz self-omemo-linux-x86_64 && \
  fpm -s dir -t deb -n libself-omemo -v ${version} -p pkgs --deb-no-default-config-files -d libsodium-dev ./target/release/libself_omemo.so=/usr/lib/ ./self_omemo.h=/usr/include/ && \
  fpm -s dir -t rpm -n libself-omemo -v ${version} -p pkgs -d libsodium-devel ./target/release/libself_omemo.so=/usr/lib/ ./self_omemo.h/=/usr/include/"

.publish: &publish |
  echo $GCP_SA_CI | base64 -d > /tmp/gcp-sa-ci.json
  gcloud auth activate-service-account --key-file /tmp/gcp-sa-ci.json
  gsutil cp pkgs/libself-omemo* gs://download-29ea2c/omemo

before_script:
  - export SCRIPTS_DIR=$(mktemp -d)
  - git clone -q --depth 1 "${SCRIPTS_REPO}" "${SCRIPTS_DIR}"

license-check:
  stage: pre-build
  image: docker:stable-git
  services:
    - docker:19.03.2-dind
  script:
    - ${SCRIPTS_DIR}/git-setup
    - ${SCRIPTS_DIR}/license-check
  allow_failure: true
  only:
    - branches

build:
  stage: build
  image: aldgateventuresbot/deploy
  services:
    - docker:19.03.2-dind
  script:
    - version=$(${SCRIPTS_DIR}/git-new-version)
    - *build
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/pkgs
  only:
    - branches

publish:
  stage: publish
  image: aldgateventuresbot/deploy
  script:
    - ${SCRIPTS_DIR}/git-setup
    - version=$(${SCRIPTS_DIR}/git-new-version)
    - ${SCRIPTS_DIR}/git-release ${version}
    - ${SCRIPTS_DIR}/slack-release-notification ${version}
    - *publish
  only:
    - master
