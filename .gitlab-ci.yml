variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

stages:
  - Build
  - Publish

build:
  stage: Build
  image: aldgateventuresbot/deploy
  services:
    - docker:19.03.2-dind
  script:
    - build
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/pkgs
  only:
    - branches

publish:
  stage: Publish
  image: aldgateventuresbot/deploy
  script:
    - release
    - publish
  only:
    - master

.functions: &functions |
  set -x

  function new_version {
    local currentVersion
    local newVersion
    local commitDesc=$CI_COMMIT_DESCRIPTION

    if [[ $(git tag) == "" ]]; then
      newVersion="0.1.0"
    else
      currentVersion=$(git ls-remote -q --tags https://${GITHUB_TOKEN}:@github.com/${CI_PROJECT_PATH} | sort -t / -k 3 -V | grep -v '{}' | tail -n 1 | awk -F / '{print $3}')

      case $commitDesc in
        *+bump-major*)
          newVersion=$(/usr/local/bin/semver bump major $currentVersion)
          ;;
        *+bump-minor*)
          newVersion=$(/usr/local/bin/semver bump minor $currentVersion)
          ;;
        *)
          newVersion=$(/usr/local/bin/semver bump patch $currentVersion)
          ;;
      esac
    fi

    echo $newVersion
  }

  function build() {
    newVersion=$(new_version)
    mkdir pkgs

    docker run -v $PWD:/build aldgateventuresbot/rust sh -c "cd /build && \
    wget -q http://download.selfid.net/olm/libself-olm_0.1.14_amd64.deb && \
    apt update && apt install -y ./libself-olm_0.1.14_amd64.deb && \
    for arch in arm64-v8a armeabi-v7a x86 x86_64; do \
      wget -q \"http://download.selfid.net/olm/libself-olm-0.1.14-android-\$arch.tar.gz\" && \
      tar -zxvf \"libself-olm-0.1.14-android-\$arch.tar.gz\" && \
      mv \"self-olm-android-\$arch\" \"/usr/local/lib/\$arch\"; \
    done; \
    cargo build --release && cargo build --release --target aarch64-linux-android && \
    cargo build --release --target armv7-linux-androideabi && \
    cargo build --release --target x86_64-linux-android && \
    cargo build --release --target i686-linux-android && \
    for arch in arm64-v8a armeabi-v7a x86 x86_64; do \
      mkdir -p \"self-omemo-android-\$arch/include/\" && \
      cp self_omemo.h \"self-omemo-android-\$arch/include/\"; \
    done; \
    cp /build/target/aarch64-linux-android/release/libself_omemo.so /build/self-omemo-android-arm64-v8a/ && \
    cp /build/target/armv7-linux-androideabi/release/libself_omemo.so /build/self-omemo-android-armeabi-v7a/ && \
    cp /build/target/i686-linux-android/release/libself_omemo.so /build/self-omemo-android-x86/ && \
    cp /build/target/x86_64-linux-android/release/libself_omemo.so /build/self-omemo-android-x86_64/ && \
    for arch in arm64-v8a armeabi-v7a x86 x86_64; do \
      tar -zcvf \"/build/pkgs/libself-omemo-$newVersion-android-\$arch.tar.gz\" \"self-omemo-android-\$arch\"; \
    done"

    docker run -v $PWD:/build aldgateventuresbot/fpm sh -c "apt update && \
    apt install -y libsodium-dev rpm && \
    cd /build && \
    mkdir -p self-omemo-linux-x86_64/include/ && \
    cp self_omemo.h /build/self-omemo-linux-x86_64/include/ && \
    cp ./target/release/libself_omemo.so /build/self-omemo-linux-x86_64 && \
    tar -zcvf /build/pkgs/libself-omemo-$newVersion-linux-x86_64.tar.gz self-omemo-linux-x86_64 && \
    fpm -s dir -t deb -n libself-omemo -v ${newVersion} -p pkgs --deb-no-default-config-files -d libsodium-dev ./target/release/libself_omemo.so=/usr/lib/ ./self_omemo.h=/usr/include/ && \
    fpm -s dir -t rpm -n libself-omemo -v ${newVersion} -p pkgs -d libsodium-devel ./target/release/libself_omemo.so=/usr/lib/ ./self_omemo.h/=/usr/include/"
  }

  function setup_git() {
    git config --global user.name self-ci-bot
    git config --global user.email ops@selfid.net
    git config --global url."https://${GITHUB_TOKEN}:@github.com".insteadOf "https://github.com"
  }

  function release() {
    newVersion=$(new_version)
    setup_git
    git remote set-url origin https://${GITHUB_TOKEN}:@github.com/${CI_PROJECT_PATH}
    git_release $newVersion
    slack_notify $newVersion
  }

  function git_release() {
    version=$1
    git tag -a $version -m "$version"
    git push origin $version
  }

  function publish() {
    echo $GCP_SA_CI | base64 -d > /tmp/gcp-sa-ci.json
    gcloud auth activate-service-account --key-file /tmp/gcp-sa-ci.json
    gsutil cp pkgs/libself-omemo* gs://download.selfid.net/omemo
  }

  function slack_notify() {
    version=$1
    slack chat send "New release <https://github.com/${CI_PROJECT_PATH}|${CI_PROJECT_NAME}> <https://github.com/${CI_PROJECT_PATH}/commits/${version}|${version}>" '#ci'
  }

before_script:
  - *functions
